#########################################
# Utility Functions

###
# some echo helpers
# @author Adam Eivy
###

# Colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"
COL_BLUE=$ESC_SEQ"34;01m"
COL_MAGENTA=$ESC_SEQ"35;01m"
COL_CYAN=$ESC_SEQ"36;01m"

function ok() {
    echo -e "$COL_GREEN[ok]$COL_RESET "$1
}

function bot() {
    echo
    echo -e "$COL_GREEN\[._.]/$COL_RESET - "$1
}

function running() {
    echo -en " ⇒ "$1"..."
}

function action() {
    echo -e "$COL_YELLOW[action]$COL_RESET"
    running $1"..."
}

function warn() {
    echo -e "$COL_YELLOW[warning]$COL_RESET "$1
}

function error() {
    echo -e "$COL_RED[error]$COL_RESET "$1
}

# Create a new git repo with one README commit and CD into it
function gitnr() { mkdir $1; cd $1; git init; touch README; git add README; git commit -mFirst-commit;}

# Do a Matrix movie effect of falling characters
function matrix1() {
echo -e "\e[1;40m" ; clear ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) ;sleep 0.05; done|gawk '{ letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

function matrix2() {
echo -e "\e[1;40m" ; clear ; characters=$( jot -c 94 33 | tr -d '\n' ) ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) $characters ;sleep 0.05; done|gawk '{ letters=$5; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

# Use Mac OSX Preview to open a man page in a more handsome format
function manp() {
  man -t $1 | open -f -a /Applications/Preview.app
}

# Show normally hidden system and dotfile types of files
# in Mac OSX Finder
function showhiddenfiles() {
  defaults write com.apple.Finder AppleShowAllFiles YES
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

# Hide (back to defaults) normally hidden system and dotfile types of files
# in Mac OSX Finder
function hidehiddenfiles() {
  defaults write com.apple.Finder AppleShowAllFiles NO
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

function setproj()
{
    echo "###############"
    echo "##  \[._.]/  ##"
    echo "###############"
    bot "Hi, this workspace is setup for the $1 project"
}

function schef()
{
    sudo chef-client
}

function fixperms(){
    find . \( -name "*.sh" -or -type d \) -exec chmod 755 {} \; && find . -type f ! -name "*.sh" -exec chmod 644 {} \;
}

## curlheader will return the header value specified for a given URL
## usage: curlheader ${header} ${url}
## or get all headers
## curlheader ${url}
function curlheader() {
  if [[ -z "$2" ]]; then
    echo "curl -k -s -D - $1 -o /dev/null"
    curl -k -s -D - $1 -o /dev/null:
  else
    echo "curl -k -s -D - $2 -o /dev/null | grep $1:"
    curl -k -s -D - $2 -o /dev/null | grep $1:
  fi
}

## hammer a service with curl for a given number of times
function curlhammer () {
  bot "about to hammer $1 with $2 curls ⇒";
  echo "curl -k -s -D - $1 -o /dev/null | grep 'HTTP/1.1' | sed 's/HTTP\/1.1 //'"
  for i in {1..$2}
  do
    curl -k -s -D - $1 -o /dev/null | grep 'HTTP/1.1' | sed 's/HTTP\/1.1 //'
  done
  bot "done"
}

# watch relevant information on a specific namespace
function k8watch() {
 watch -n 5 "kubectl -n $1 get pods;echo '';kubectl -n $1 get services;echo '';kubectl -n $1 get ingress;echo '';kubectl -n $1 get deployments"
}

# execute a shell on the first pod matching $2 in namespace $1, use $3 for specific container
# usage: k8exec <namespace> <podname matching pattern> [<container>]
#        k8exec vault-consul-stack "^vault.*0ds" vault
function k8exec(){
 pod=`kubectl -n $1 get pods | egrep "${2}" | head -n 1 | awk '{ print $1 }'`
 if [ -z $3 ]; then
   kubectl -n $1 exec $pod -i -t -- /bin/sh
 else
   kubectl -n $1 exec $pod -c $3 -i -t -- /bin/sh
 fi
}

function k8logs(){
 pod=`kubectl -n $1 get pods | egrep "${2}" | head -n 1 | awk '{ print $1 }'`
 if [ -z $3 ]; then
   kubectl -n $1 logs -f $pod
 else
   kubectl -n $1 logs -f $pod -c $3
 fi
}

function docker-nuke(){
  docker ps -a -q | xargs -r docker rm -f;
  docker images -q | xargs -r docker rmi -f;
  docker volume ls -q | xargs -r docker volume rm;
  docker network ls -q -f type=custom | xargs -r docker network rm;
}

# GIT
function git-branch-current {
  # vim:et sts=2 sw=2 ft=zsh
  command git symbolic-ref -q --short HEAD
}

function git-root {
  # vim:et sts=2 sw=2 ft=zsh
  command git rev-parse --show-toplevel
}

function gfp() {
  MAIN=${1:-master}; 
  git checkout -q ${MAIN} && git for-each-ref refs/heads/ "--format=%(refname:short)" | \
    while read branch; do mergeBase=$(git merge-base ${MAIN} $branch) && \
      [[ $(git cherry ${MAIN} $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == "-"* ]] && \
      git branch -D $branch; 
    done
}

# Vault
vault-dev() {
  VAULT_TOKEN_FILE="$HOME/.vault-token-dev"
  export VAULT_ADDR="https://vault.lightspeedsbx.app";
  export VAULT_TOKEN=$(vault login -token-only "$(cat $VAULT_TOKEN_FILE 2>/dev/null)" || vault login -token-only -method=oidc)
  printf "%s" "$VAULT_TOKEN" >"$VAULT_TOKEN_FILE" && chmod 600 "$VAULT_TOKEN_FILE"
}

vault-stg() {
  VAULT_TOKEN_FILE="$HOME/.vault-token-stg"
  export VAULT_ADDR="https://vault.lightspeedstg.app";
  export VAULT_TOKEN=$(vault login -token-only "$(cat $VAULT_TOKEN_FILE 2>/dev/null)" || vault login -token-only -method=oidc)
  printf "%s" "$VAULT_TOKEN" >"$VAULT_TOKEN_FILE" && chmod 600 "$VAULT_TOKEN_FILE"
}

vault-prd() {
  VAULT_TOKEN_FILE="$HOME/.vault-token-prd"
  export VAULT_ADDR="https://vault.lightspeed.app";
  export VAULT_TOKEN=$(vault login -token-only "$(cat $VAULT_TOKEN_FILE 2>/dev/null)" || vault login -token-only -method=oidc)
  printf "%s" "$VAULT_TOKEN" >"$VAULT_TOKEN_FILE" && chmod 600 "$VAULT_TOKEN_FILE"
}

# EKS
eks-list() {
  [[ $# -ne 2 ]] && echo "usage: eks-list account region" && return 1
  aws eks list-clusters \
    --profile lspay-"$1" \
    --region "$2"
}

eks-conf() {
  [[ $# -ne 1 ]] && echo "usage: eks-conf cluster" && return 1
  ACCOUNT=$(echo "$1" | cut -d- -f2 | sed 's/tooling/prod/')
  REGION=$(echo "$1" | cut -d- -f3-5)
  CONTEXT=$(aws eks update-kubeconfig \
    --profile lspay-"$ACCOUNT" \
    --region "$REGION" \
    --name "$1" |
    awk -F'context' '{print $2}' |
    awk '{print $1}')
  kubectl config rename-context "$CONTEXT" "$ACCOUNT-$REGION"
}
